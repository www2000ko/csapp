                            | # Execution begins at address 0 
0x000:                      | 	.pos 0
0x000: 30f40002000000000000 | 	irmovq stack, %rsp  	# Set up stack pointer
0x00a: 804800000000000000   | 	call main		# Execute main program
0x013: 00                   | 	halt			# Terminate program 
                            | 
                            | # Linked List of 3 elements
                            | 
0x018:                      | .align 8
0x018:                      | ele1:
0x018: 0a00000000000000     |     .quad 0x00a
0x020: 2800000000000000     |     .quad ele2
0x028:                      | ele2:
0x028: b000000000000000     |     .quad 0x0b0
0x030: 3800000000000000     |     .quad ele3
0x038:                      | ele3:
0x038: 000c000000000000     |     .quad 0xc00
0x040: 0000000000000000     |     .quad 0
                            | 
0x048: 30f71800000000000000 | main:	irmovq ele1,%rdi
0x052: 805c00000000000000   | 	call rsum		# rsum(ele1)
0x05b: 90                   | 	ret
                            | 
                            | # long rsum_list(list_ptr ls)
                            | # ls in %rdi
0x05c:                      | rsum:
0x05c: a08f                 |     pushq %r8 
0x05e: 6277                 |     andq %rdi,%rdi
0x060: 747400000000000000   |     jne    loop
0x069: 6300                 |     xorq %rax,%rax
0x06b: 709300000000000000   |     jmp exit
0x074: 50870000000000000000 | loop:	mrmovq (%rdi),%r8   # Get val
0x07e: 50770800000000000000 |     mrmovq 8(%rdi),%rdi   # Get *next
0x088: 805c00000000000000   |     call rsum
0x091: 6080                 | 	addq %r8,%rax       # Add to sum
0x093:                      | exit:
0x093: b08f                 |     popq %r8
0x095: 90                   |     ret                  # Return
                            | 
                            | # Stack starts here and grows to lower addresses
0x200:                      | 	.pos 0x200
0x200:                      | stack:
