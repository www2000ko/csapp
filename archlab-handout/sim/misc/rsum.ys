# Execution begins at address 0 
	.pos 0
	irmovq stack, %rsp  	# Set up stack pointer
	call main		# Execute main program
	halt			# Terminate program 

# Linked List of 3 elements

.align 8
ele1:
    .quad 0x00a
    .quad ele2
ele2:
    .quad 0x0b0
    .quad ele3
ele3:
    .quad 0xc00
    .quad 0

main:	irmovq ele1,%rdi
	call rsum		# rsum(ele1)
	ret

# long rsum_list(list_ptr ls)
# ls in %rdi
rsum:
    pushq %r8 
    andq %rdi,%rdi
    jne    loop
    xorq %rax,%rax
    jmp exit
loop:	mrmovq (%rdi),%r8   # Get val
    mrmovq 8(%rdi),%rdi   # Get *next
    call rsum
	addq %r8,%rax       # Add to sum
exit:
    popq %r8
    ret                  # Return

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
